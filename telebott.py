import telebot
from telebot import types

API_TOKEN = '1648129406:AAGwM1NZsKi-E1L2QzJiw0mJgYF-1sNeXRI'

bot = telebot.TeleBot(API_TOKEN)

user_dict = {}
user_chats = 0


class User:
    def __init__(self, name):
        self.name = name
        self.age = None
        self.languages = None
        self.sex = None

        keys = ['age', 'languages', 'git_acc', 'will_learn', 'project_um', 'want_admin']
        for key in keys:
            self.key = None


# Handle '/start' and '/help'
@bot.message_handler(commands=['help', 'start'])
def send_welcome(message):
    bot.send_message(message.from_user.id, """\
–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ CODERCAMP, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤–≤–µ–ª–∏ /reg

""")


@bot.message_handler(commands=['reg'])
def send_welcome1(message):
    try:
        chat_id = message.chat.id
        msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º:  ")
        bot.register_next_step_handler(msg, process_name_step)


    except Exception as e:

        bot.reply_to(message, 'oooops')


def process_name_step(message):
    try:
        chat_id = message.chat.id
        name = message.text
        user = User(name)
        user_dict[chat_id] = user
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç: ')
        bot.register_next_step_handler(msg, process_age_step)
    except Exception as e:
        bot.reply_to(message, 'oooops')


def process_age_step(message):
    try:
        chat_id = message.chat.id
        age = message.text
        if not age.isdigit():
            msg = bot.send_message(chat_id, '–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –≤–≤–µ–¥–∏ –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ: ')
            bot.register_next_step_handler(msg, process_age_step)
            return
        user = user_dict[chat_id]
        user.age = age
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('Python', 'C++', 'C#', 'JAVA', 'jS', 'Ruby', 'GOLANG')
        msg = bot.send_message(chat_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —è–∑—ã–∫ –∑–Ω–∞–µ—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ (–∏—Ö): ',
                               reply_markup=markup)
        bot.register_next_step_handler(msg, process_language_step)
    except Exception as e:
        bot.reply_to(message, 'oooops')


def process_language_step(message):
    try:
        chat_id = message.chat.id
        language = message.text
        user = user_dict[chat_id]
        user.languages = language

        msg = bot.send_message(chat_id, '–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –≥–∏—Ç—Ö–∞–±, –µ—Å–ª–∏ –Ω–µ—Ç - –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–µ—Ç: ')
        bot.register_next_step_handler(msg, process_git_acc_step)
    except Exception as e:
        bot.reply_to(message, '–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞')


def process_git_acc_step(message):
    try:
        chat_id = message.chat.id
        git_acc1 = message.text
        user = user_dict[chat_id]
        user.git_acc = git_acc1
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('Python', 'C++', 'C#', 'JAVA', 'jS', 'Ruby', 'GOLANG')
        msg = bot.send_message(chat_id, '–ö–∞–∫–æ–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –≤—ã—É—á–∏—Ç—å? ', reply_markup=markup)
        bot.register_next_step_handler(msg, process_want_lang_step)

    except Exception as e:
        bot.reply_to(message, '–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞')


def process_want_lang_step(message):
    try:
        chat_id = message.chat.id
        will_learn = message.text
        user = user_dict[chat_id]
        user.will_learn = will_learn
        msg = bot.send_message(chat_id,
                               '–ù–∞—à –ø—Ä–æ–µ–∫—Ç, –ø–æ—Ö–æ–∂ –Ω–∞ open source, –≤ –Ω–µ–≥–æ –º–æ–≥—É—Ç –¥–µ–ª–∞—Ç—å –≤–∫–ª–∞–¥ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏, –∫–∞–∫–æ–π –≤—ã –≤–∫–ª–∞–¥ –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ')
        bot.register_next_step_handler(msg, process_project_um_step)
    except Exception as e:
        bot.reply_to(message, '12!')


def process_project_um_step(message):
    try:
        chat_id = message.chat.id
        project_um = message.text
        user = user_dict[chat_id]
        user.project_um = project_um
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add('–î–∞', '–ù–µ—Ç')
        msg = bot.send_message(chat_id, '–•–æ—Ç–µ–ª–∏ –±—ã –≤—ã —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ: ', reply_markup=markup)
        bot.register_next_step_handler(msg, process_want_admin_step)
    except Exception as e:
        bot.reply_to(message, 'oops!')


def process_want_admin_step(message):
    try:
        global user_chats
        chat_id = message.chat.id
        want_adm = message.text
        name = message.from_user.username
        name1 = message.from_user.first_name
        user = user_dict[chat_id]
        user.want_admin = want_adm
        bot.send_message(chat_id, f'–í–∞—à–µ –∏–º—è/(–∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º) - {user.name} \n'
                         + f'–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç  -  {user.age} \n'
                         + f'–í—ã –∑–Ω–∞–µ—Ç–µ —è–∑—ã–∫(–∫–∏)  -  {user.languages} \n'
                         + f'–í–∞—à –∞–∫–∫–∞—É–Ω—Ç github  -  {user.git_acc} \n'
                         + f'–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –≤—ã—É—á–∏—Ç—å  -  {user.will_learn} \n'
                         + f'–í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞  -  {user.project_um} \n'
                         + f'–í–∞—à –≤—ã–±–æ—Ä —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º  -  {user.want_admin}')
        markup = types.InlineKeyboardMarkup()
        site_btn = types.InlineKeyboardButton(text='–ü—Ä–∏–Ω—è—Ç—å', callback_data='yes')
        site_btn1 = types.InlineKeyboardButton(text='–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data='no')
        markup.add(site_btn, site_btn1)
        user_chats = message.from_user.id

        bot.send_message(-1001423822051, '–ó–∞—è–≤–∫–∞ –æ—Ç ' + name + ' (' + name1 + ') ' + '\n'
                         + f'–ò–º—è/(–∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º) - {user.name} \n'
                         + f'–í–æ–∑—Ä–∞—Å—Ç  -  {user.age} \n'
                         + f'–ó–Ω–∞–µ—Ç —è–∑—ã–∫(–∫–∏)  -  {user.languages} \n'
                         + f'–ê–∫–∫–∞—É–Ω—Ç github  -  {user.git_acc} \n'
                         + f'–°–æ–±–∏—Ä–∞–µ—Ç—Å—è –≤—ã—É—á–∏—Ç—å  -  {user.will_learn} \n'
                         + f'–ú–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –¥–ª—è –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞  -  {user.project_um} \n'
                         + f'–í—ã–±–æ—Ä —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º  -  {user.want_admin}'
                         + f'ID —á–µ–ª–æ–≤–µ–∫–∞ = {user_chats}', reply_markup=markup)


    except Exception as e:
        bot.reply_to('oops!')


@bot.callback_query_handler(func=lambda call: True)
def answer(call):
    if call.data == 'yes':
        bot.send_message(call.message.chat.id, '(' + call.from_user.username +  ')' +  ' –ü—Ä–∏–Ω—è–ª')
        bot.send_message(call.message.chat.id, call.message.from_user.first_name + '(' + call.from_user.username + ')' + ' –≤ –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É')
        print(user_chats)
        bot.send_message(user_chats, """
       –¢—ã –ø—Ä–∏–Ω—è—Ç –≤ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æüë©üèæ‚Äçüíª

        –¢—ã —Å—é–¥–∞ –ø—Ä–∏—à–µ–ª, —á—Ç–æ–±—ã –Ω–∞—É—á–∏—Ç—å—Å—è —á–µ–º—É-—Ç–æ –Ω–æ–≤–æ–º—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è —Å –ª—é–¥—å–º–∏ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏üë®üèª‚Äçüíª

        –£ –Ω–∞—Å —Å–µ–π—á–∞—Å –µ—Å—Ç—å 3 —Ä–µ—Å—É—Ä—Å–∞:

        -üíΩ–°–∫–ª–∞–¥ (–∫–∞–Ω–∞–ª —Å –∫—É—Ä—Å–∞–º–∏ –∏ –∫–Ω–∏–≥–∞–º–∏) - https://t.me/joinchat/AzHrJONbFec1NGMy
        - üë®üèº‚Äçüíª–ß–∞—Ç(–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤) - https://t.me/joinchat/XA_gQwveeAdhNDIy
        - üé•–ú–µ–¥–∏–∞-–ö–∞–Ω–∞–ª(—Ñ–∏–ª—å–º—ã, —Å–µ—Ä–∏–∞–ª—ã, —Ç–∏–∫—Ç–æ–∫–∏ –ø–æ IT-—Ç–µ–º–∞—Ç–∏–∫–µ, –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ) - https://t.me/joinchat/-iEekHA18MdlZjky
        """)
    else:
        bot.send_message(call.message.chat.id,
                         call.from_user.first_name + '(' + call.from_user.username + ')' + ' –û—Ç–∫–ª–æ–Ω–∏–ª –∑–∞—è–≤–∫—É' + '(' + call.from_user.username + ')')
        bot.send_message(user_chats, '–ò–∑–≤–∏–Ω–∏, –Ω–æ —Ç–µ–±—è –Ω–µ –ø—Ä–∏–Ω—è–ª–∏((')


# def process_sex_step(message):
#   try:
#        chat_id = message.chat.id
#        sex = message.text
#        user = user_dict[chat_id]
#
#        user.sex = sex
#
#        bot.send_message(chat_id, 'Nice to meet you ' + user.name + '\n Age:' + str(user.age) + '\n Sex:' + user.sex)
#    except Exception as e:
#        bot.reply_to(message, 'oooops')


# Enable saving next step handlers to file "./.handlers-saves/step.save".
# Delay=2 means that after any change in next step handlers (e.g. calling register_next_step_handler())
# saving will hapen after delay 2 seconds.


# Load next_step_handlers from save file (default "./.handlers-saves/step.save")
# WARNING It will work only if enable_save_next_step_handlers was called!

bot.polling()
